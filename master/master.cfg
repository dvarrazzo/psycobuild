# ex: set syntax=python:

c = BuildmasterConfig = {}

pcfg = {}
import os
from twisted.python import log
if os.path.exists('./personal_settings.py'):
    log.msg("reading personal settings file")
    execfile('./personal_settings.py', pcfg)


####### PROJECT IDENTITY

c['projectName'] = "Psycopg"
c['projectURL'] = "http://initd.org/psycopg"
c['buildbotURL'] = pcfg.get('buildbotUrl', "http://localhost:8010/")


####### BUILDSLAVES

c['slavePortnum'] = pcfg.get('slavePortnum', 9989)

from buildbot.buildslave import BuildSlave

ikki = BuildSlave("ikki", pcfg['passwords']['ikki'],
    max_builds=1,
    properties = dict(
        python_versions={
            '2.4': {
                'executable': "/usr/local/py24/bin/python2.4",
            },
            '2.6': {
                'executable': "python2.6",
                'pg_config': '/usr/local/pgsql/bin/pg_config',
            },
        },
        pg_dsns={
            '8.0': {
                'PSYCOPG2_TESTDB': 'psycopg2_test',
                'PSYCOPG2_TESTDB_HOST': 'localhost',
                'PSYCOPG2_TESTDB_PORT': '54380',
                },
            '8.4': {
                'PSYCOPG2_TESTDB': 'psycopg2_test',
                'PSYCOPG2_TESTDB_HOST': 'localhost',
                },
            '9.0': {
                'PSYCOPG2_TESTDB': 'psycopg2_test',
                'PSYCOPG2_TESTDB_HOST': 'localhost',
                'PSYCOPG2_TESTDB_PORT': '54390',
                },
        },
        tested_pairs=[
            ('2.4', '8.0'),
            ('2.4', '8.4'),
            ('2.6', '8.0'),
            ('2.6', '8.4'),
            ('2.6', '9.0'),
        ]))

c['slaves'] = [ ikki ]


####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource

c['change_source'] = PBChangeSource()


####### SCHEDULERS

from buildbot.scheduler import Scheduler, Triggerable

c['schedulers'] = []

# Run the test after the sdist is ready.
sdist_trigger = Triggerable(name='test-sdist', builderNames=[])

c['schedulers'].append(sdist_trigger)



####### BUILDERS

#repourl = "git://src.develer.com/users/piro/psycopg2.git"
repourl = "/home/piro/dev/psycopg2/"
branch = "python2"

from buildbot.locks import SlaveLock
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import WithProperties
from buildbot.steps.source import Git
from buildbot.steps.shell import Compile, Test, ShellCommand, SetProperty
from buildbot.steps.trigger import Trigger
from buildbot.steps.transfer import FileUpload, FileDownload

def make_sdist(slave):
    """Create the builder that makes the sdist."""
    make = ['make']
    f = BuildFactory()
    f.addStep(Git(repourl=repourl, branch=branch))
    f.addStep(SetProperty(
        command=r"""grep PSYCOPG_VERSION setup.py | head -1 | sed -e "s/.*'\(.*\)'/\1/" """,
        property="version"))
    f.addStep(Compile(command=make + ["package"]))
    f.addStep(ShellCommand(
        description="making env", descriptionDone="env",
        command=make + ["env"]))
    f.addStep(ShellCommand(
        description="making docs", descriptionDone="docs",
        command=make + ["docs"]))
    f.addStep(ShellCommand(
        description="making sdist", descriptionDone="sdist",
        command=make + ["sdist"]))
    f.addStep(FileUpload(
        slavesrc=WithProperties("dist/psycopg2-%s.tar.gz", "version"),
        masterdest=WithProperties(
            "%s/public_html/sdist/psycopg2-%%s.tar.gz" % basedir, 'version')))

    f.addStep(Trigger(schedulerNames=['test-sdist'],
        copy_properties=['version']))

    b = BuilderConfig(
        name="sdist",
        slavename=slave.slavename,
        factory=f)

    return b

def make_test_sdist(slave):
    for pyver, pgver in slave.properties['tested_pairs']:
        data = slave.properties['python_versions'][pyver]
        dsn = slave.properties['pg_dsns'][pgver]

        python = data.get("executable", "python")
        pg_config = data.get("pg_config")
        env = dsn.copy()

        make = ["make", "PYTHON=%s" % python]
        if pg_config:
            make += ["PG_CONFIG=" + pg_config]

        f = BuildFactory()

        # ensure to link to the intended libpq version
        if pg_config:
            f.addStep(SetProperty(
                command="%s --libdir" % pg_config,
                property="libdir"))

            env['LD_LIBRARY_PATH'] = WithProperties("%s", "libdir")

        f.addStep(FileDownload(
            mastersrc=WithProperties(
                "%s/public_html/sdist/psycopg2-%%s.tar.gz" % basedir, 'version'),
            slavedest=WithProperties("psycopg2-%s.tar.gz", 'version')))
        f.addStep(ShellCommand(
            description="clearing", descriptionDone="clear",
            command=["rm", "-rf",
                WithProperties("psycopg2-%s", "version")]))
        f.addStep(ShellCommand(
            description="unpacking", descriptionDone="unpack",
            command=["tar", "xzvf",
                WithProperties("psycopg2-%s.tar.gz", 'version')]))
        f.addStep(Compile(command=make + ["package"],
            workdir=WithProperties("build/psycopg2-%s", "version")))
        f.addStep(Test(command=make + ["runtests"],
            workdir=WithProperties("build/psycopg2-%s", "version"),
            env=env))

        b = BuilderConfig(
            name="test-py%s-pg%s-%s" % (pyver, pgver, slave.slavename),
            slavename=slave.slavename,
            factory=f)

        sdist_trigger.builderNames.append(b.name)
        yield b

builders = c['builders'] = []
builders.append(make_sdist(ikki))
builders += list(make_test_sdist(ikki))


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
http_port = pcfg.get('webStatusPort', 'tcp:8010:interface=127.0.0.1')
allowForce = pcfg.get('webAllowForce', True)
c['status'].append(html.WebStatus(http_port=http_port, allowForce=allowForce))


####### DEBUGGING OPTIONS

# c['debugPassword'] = "debugpassword"
