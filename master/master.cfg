# ex: set filetype=python:

c = BuildmasterConfig = {}

pcfg = {}
import os
from twisted.python import log
if os.path.exists('./personal_settings.py'):
    log.msg("reading personal settings file")
    execfile('./personal_settings.py', pcfg)


####### PROJECT IDENTITY

c['projectName'] = "Psycopg"
c['projectURL'] = "http://initd.org/psycopg"
c['buildbotURL'] = pcfg.get('buildbotUrl', "http://localhost:8010/")


####### BUILDSLAVES

c['slavePortnum'] = pcfg.get('slavePortnum', 9989)

from buildbot.buildslave import BuildSlave

ikki = BuildSlave("ikki", pcfg['passwords']['ikki'],
    max_builds=1,
    properties = dict(
        python_versions={
            '2.4': {
                'executable': "/usr/local/py24/bin/python2.4",
            },
            '2.6': {
                'executable': "python2.6",
                'pg_config': '/usr/local/pgsql/bin/pg_config',
            },
        },
        pg_dsns={
            '8.0': {
                'PSYCOPG2_TESTDB': 'psycopg2_test',
                'PSYCOPG2_TESTDB_HOST': 'localhost',
                'PSYCOPG2_TESTDB_PORT': '54380',
                },
            '8.4': {
                'PSYCOPG2_TESTDB': 'psycopg2_test',
                'PSYCOPG2_TESTDB_HOST': 'localhost',
                },
            '9.0': {
                'PSYCOPG2_TESTDB': 'psycopg2_test',
                'PSYCOPG2_TESTDB_HOST': 'localhost',
                'PSYCOPG2_TESTDB_PORT': '54390',
                },
        },
        tested_pairs=[
            ('2.4', '8.0'),
            ('2.4', '8.4'),
            ('2.6', '8.0'),
            ('2.6', '8.4'),
            ('2.6', '9.0'),
        ]))

win2k_vbox = BuildSlave("win2k-vbox", pcfg['passwords']['win2k-vbox'],
    max_builds=1,
    properties = dict(
        python_versions={
            '2.5': {
                'executable': "C:/python25/python.exe",
                'pg_config': 'C:/pgsql90/bin/pg_config.exe',
                'compiler': 'mingw32',
            },
        },
        pg_dsns={
            '8.4': {
                'PSYCOPG2_TESTDB': 'psycopg2_test',
                'PSYCOPG2_TESTDB_HOST': '10.0.2.2',
                'PSYCOPG2_TESTDB_USER': 'piro',
                },
        },
        tested_pairs=[
            ('2.5', '8.4'),
        ]))

c['slaves'] = [ ikki, win2k_vbox ]


####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource

c['change_source'] = PBChangeSource()


####### SCHEDULERS

from buildbot.scheduler import Scheduler, Triggerable

c['schedulers'] = []

# Run the test after the sdist is ready.
sdist_trigger = Triggerable(name='test-sdist', builderNames=[])

c['schedulers'].append(sdist_trigger)



####### BUILDERS

repourl = "git://src.develer.com/users/piro/psycopg2.git"
#repourl = "/home/piro/dev/psycopg2/"
branch = "python2"

from buildbot.locks import SlaveLock
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import WithProperties
from buildbot.steps.source import Git
from buildbot.steps.shell import Compile, Test, ShellCommand, SetProperty
from buildbot.steps.trigger import Trigger
from buildbot.steps.transfer import FileUpload, FileDownload

def make_sdist(slave):
    """Create the builder that makes the sdist."""
    make = ['make']
    f = BuildFactory()
    f.addStep(Git(repourl=repourl, branch=branch))
    f.addStep(SetProperty(
        command=r"""grep PSYCOPG_VERSION setup.py | head -1 | sed -e "s/.*'\(.*\)'/\1/" """,
        property="version"))
    f.addStep(Compile(command=make + ["package"]))
    f.addStep(ShellCommand(
        description="making env", descriptionDone="env",
        command=make + ["env"]))
    f.addStep(ShellCommand(
        description="making docs", descriptionDone="docs",
        command=make + ["docs"]))
    f.addStep(ShellCommand(
        description="making sdist", descriptionDone="sdist",
        command=make + ["sdist"]))
    f.addStep(FileUpload(
        slavesrc=WithProperties("dist/psycopg2-%s.tar.gz", "version"),
        masterdest=WithProperties(
            "%s/public_html/dist/psycopg2-%%s.tar.gz" % basedir, 'version')))

    f.addStep(Trigger(schedulerNames=['test-sdist'],
        copy_properties=['version']))

    b = BuilderConfig(
        name="sdist",
        slavename=slave.slavename,
        factory=f)

    return b

def make_test_sdist(slave):
    for pyver, pgver in slave.properties['tested_pairs']:
        data = slave.properties['python_versions'][pyver]
        dsn = slave.properties['pg_dsns'][pgver]

        python = data.get("executable", "python")
        pg_config = data.get("pg_config")
        env = dsn.copy()

        make = ["make", "PYTHON=%s" % python]
        if pg_config:
            make += ["PG_CONFIG=" + pg_config]

        f = BuildFactory()

        # ensure to link to the intended libpq version
        if pg_config:
            f.addStep(SetProperty(
                command="%s --libdir" % pg_config,
                property="libdir"))

            env['LD_LIBRARY_PATH'] = WithProperties("%s", "libdir")

        f.addStep(FileDownload(
            mastersrc=WithProperties(
                "%s/public_html/dist/psycopg2-%%s.tar.gz" % basedir, 'version'),
            slavedest=WithProperties("psycopg2-%s.tar.gz", 'version')))
        f.addStep(ShellCommand(
            description="clearing", descriptionDone="clear",
            command=["rm", "-rf",
                WithProperties("psycopg2-%s", "version")]))
        f.addStep(ShellCommand(
            description="unpacking", descriptionDone="unpack",
            command=["tar", "xzvf",
                WithProperties("psycopg2-%s.tar.gz", 'version')]))
        f.addStep(Compile(command=make + ["package"],
            workdir=WithProperties("build/psycopg2-%s", "version")))
        f.addStep(Test(command=make + ["runtests"],
            workdir=WithProperties("build/psycopg2-%s", "version"),
            env=env))

        b = BuilderConfig(
            name="test-py%s-pg%s-%s" % (pyver, pgver, slave.slavename),
            slavename=slave.slavename,
            factory=f)

        sdist_trigger.builderNames.append(b.name)
        yield b

def make_wininst(slave):
    """Create the builder that makes a wininst."""
    for pyver, data in slave.properties['python_versions'].iteritems():
        name = "wininst-" + pyver
        pyexe = data['executable']
        pg_config = ('pg_config' in data
            and ['--pg-config', data['pg_config']] or [])
        compiler = ('compiler' in data
            and ['--compiler', data['compiler']] or [])

        f = BuildFactory()
        f.addStep(Git(repourl=repourl, branch=branch))
        f.addStep(ShellCommand(
            description="cleaning", descriptionDone="clean",
            command=["del", "/S", "/Q", "dist\\*.exe"]))
        f.addStep(ShellCommand(
            description="making wininst", descriptionDone="wininst",
            command=[pyexe, "setup.py", "build_ext"]
                + pg_config + compiler + ["bdist_wininst"]))
        # TODO: brittle, coupled with the above cleaning operation
        # that may probably fail if no file is found.
        f.addStep(SetProperty(
            command=[pyexe, "-c", 'import os; print os.listdir("dist")[0]'],
            property="installer"))
        f.addStep(FileUpload(
            slavesrc=WithProperties("dist/%s", "installer"),
            masterdest=WithProperties(
                "%s/public_html/dist/%%s" % basedir, 'installer')))

        f.addStep(Trigger(schedulerNames=[name],
            copy_properties=['installer']))

        # Create a trigger for the test slave interested to this package
        trigger = Triggerable(name=name, builderNames=[])
        c['schedulers'].append(trigger)

        b = BuilderConfig(
            name=name,
            slavename=slave.slavename,
            factory=f)

        yield b

def make_test_wininst(slave):
    for pyver, pgver in slave.properties['tested_pairs']:
        data = slave.properties['python_versions'][pyver]
        dsn = slave.properties['pg_dsns'][pgver]

        name = "wininst-" + pyver
        pyexe = data['executable']
        env = dsn.copy()
        env['PYTHONPATH'] = 'PLATLIB;PLATLIB\\psycopg2'

        # TODO: required for the libpq.dll, not for the static lib
        if 'pg_config' in data:
            env['PATH'] = os.path.dirname(data['pg_config'])

        f = BuildFactory()
        f.addStep(FileDownload(
            mastersrc=WithProperties(
                "%s/public_html/dist/%%s" % basedir, 'installer'),
            slavedest=WithProperties("%s", 'installer')))
        # TODO: clear?
#        f.addStep(ShellCommand(
#            description="clearing", descriptionDone="clear",
#            command=["del", "/S", "/Q", "PLATLIB"]))
        f.addStep(ShellCommand(
            description="unpacking", descriptionDone="unpack",
            # TODO: replace with a portable script
            command=["C:/python26/python.exe", "-c", "import sys, zipfile; "
            "zipfile.ZipFile(sys.argv[1]).extractall()",
                WithProperties("%s", 'installer')]))
        f.addStep(Test(command=[pyexe,
            "PLATLIB/psycopg2/tests/__init__.py", "--verbose"],
            env=env))

        b = BuilderConfig(
            # TODO: should be more specific?
            name="test-win-py%s-pg%s-%s" % (pyver, pgver, slave.slavename),
            slavename=slave.slavename,
            factory=f)

        # Be ready for a package with the required characteristics
        for t in c['schedulers']:
            if t.name == name:
                t.builderNames.append(b.name)
                break
        else:
            raise Exception("can't find trigger %s" % name)

        yield b

builders = c['builders'] = []
builders.append(make_sdist(ikki))
builders += list(make_test_sdist(ikki))

builders += list(make_wininst(win2k_vbox))
builders += list(make_test_wininst(win2k_vbox))

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
http_port = pcfg.get('webStatusPort', 'tcp:8010:interface=127.0.0.1')
allowForce = pcfg.get('webAllowForce', True)
c['status'].append(html.WebStatus(http_port=http_port, allowForce=allowForce))


####### DEBUGGING OPTIONS

# c['debugPassword'] = "debugpassword"
